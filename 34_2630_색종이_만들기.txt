## 다른 풀이
<pre>
<code>
import sys

n = int(sys.stdin.readline())
matrix = []

for _ in range(n):
    num = list(map(int,sys.stdin.readline().split()))
    matrix.append(num)

result = []

def check(start_i, start_j, n):
    color = matrix[start_i][start_j]

    for i in range(start_i,start_i + n):
        for j in range(start_j, start_j + n):
            if color != matrix[i][j]:
                check(start_i,start_j,n//2)
                check(start_i,start_j+n//2,n//2)
                check(start_i+n//2,start_j,n//2)
                check(start_i+n//2,start_j+n//2,n//2)
                return
    if color == 0:
        result.append(0)
    else:
        result.append(1)

check(0,0,n)
print(result.count(0))
print(result.count(1))
</code>
</pre>
-출처 : https://leedaeho1188.tistory.com/39
- 다시한번 풀어보기

- 동적 계획법과 분할 정복은 비슷하다 1. 작은 단위 부터 해결 후 반복과 재귀를 사용 2. top-down, bottom-up 을 사용
- 동적계획법은 작은 단위를 해결하며, 중복되는 작은 부분을 memoization하며 큰 부분을 푸는 데 사용한다.   
분할 정복은 작은 단위를 해결하고 병합하지만, sub problems의 중복이 없기에 각각 풀어내야한다.
- 출처 : https://suri78.tistory.com/66
